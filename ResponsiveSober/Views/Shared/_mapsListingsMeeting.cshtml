@model IEnumerable<SoberModel.usp_GetMeetings_Result>

<div id="map-canvas" style="width: 100%; height: 400px">
</div>

<script>
    var mapCanvas = null;
    var geocoder = null;
    var marker = null;
    var map3 = null;
    var myPano = null;
    var markers = [];
    var infomarkers = [];
    var latslangs = [];
    var bounds = new google.maps.LatLngBounds();

    $(document).ready(function () {
        geocoder = new google.maps.Geocoder();

        var latlng = new google.maps.LatLng(38.2541667, -85.7594444);
        var mapOptions = {
            zoom: 13,
            center: latlng
        }

        mapCanvas = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
        @*mapcenter('@Model.Select(x => x.City).First(),@Model.Select(x => x.State).First()');*@

        @{
            string action = "";

            if (Model.Count() > 0)
            {
                if (Model.First().Type == 1)
                {
                    action = "na_meetings";
                }
                else if (Model.First().Type == 2)
                {
                    action = "aa_meetings";
                }
            }
        }

        @foreach (var meeting in Model)
        {
            string location = meeting.City + ", " + meeting.State;

            if (meeting.Zip.HasValue)
            {
                location += ", " + meeting.Zip.Value.ToString();
            }

            string profile = Url.Action(action, "meetings", new { place = meeting.MeetingTitle.ToLower().Trim(), day = meeting.Day, meetingid = meeting.Id, location = location});
            string title = meeting.MeetingTitle + " - " + meeting.Day;

            if (meeting.Latitude.HasValue && meeting.Longitude.HasValue)
            {
                <text>
                    setMarker(@meeting.Longitude, @meeting.Latitude, '@title', '@profile');
                </text>
            }
            else
            {
                string address = meeting.Street1.Trim() + "," + meeting.City.Trim() + "," + meeting.State.Trim() + ",usa";

                <text>
                    getLatLong('@address', '@title', '@profile', '@meeting.Id');
                </text>
            }
        }
    });
    
    function mapcenter(address3) {
        geocoder.geocode({ 'address': address3, 'region': 'usa' }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                result = results[0].geometry.location;
                mapCanvas.setCenter(result);

            } else {
                result = "Unable to find address: " + status;
                console.log(result);
            }
        });
    }

    function SetMultipleMarkers(title, link, latlng){
        var ret = true;

        for(var i = 0; i < markers.length; i++) {
            if ( markers[i].getPosition().equals( latlng ) ) {
                ret = false;
                infomarkers[i].setContent(infomarkers[i].getContent() + '<a href="' + link + '">' + title + '</a><br/>');
                break;
            }
        }

        if(ret == true) {
            var marker = new google.maps.Marker({
                position: latlng,
                map: mapCanvas,
                title: title
            });

            markers.push(marker);
            bounds.extend(latlng);
            mapCanvas.fitBounds(bounds);

            var contentString = '<a href="' + link + '">' + title + '</a> <br/>';
            var infowindow = new google.maps.InfoWindow({
                content: contentString
            });

            infomarkers.push(infowindow);

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(mapCanvas, marker);
            });
        }
    }

    function getLatLong(address3, title, link, idMeeting) {    
        geocoder.geocode({ 'address': address3, 'region': 'usa' }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                result = results[0].geometry.location;
                var myLatlng = new google.maps.LatLng(result.lat(), result.lng());

                SetMultipleMarkers(title, link, myLatlng);                        

                $.ajax({
                    url: '@Url.Action("SetLongitudeLatitude", "meetings")',
                    type: "POST",
                    data: { idMeeting: idMeeting, longitude: result.lng(), latitude: result.lat() }
                });

            } else {
                result = "Unable to find address: " + status;
                console.log(result);
            }
        });        
    }

    function setMarker(longitude, latitude, title, link) {
        var myLatlng = new google.maps.LatLng(latitude, longitude);        
        SetMultipleMarkers(title, link, myLatlng);
    }
</script>